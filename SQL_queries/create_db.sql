CREATE DATABASE IF NOT EXISTS GAME_DB;
USE GAME_DB;

CREATE TABLE IF NOT EXISTS USERS_LOGIN (
    USERNAME VARCHAR(255) PRIMARY KEY,
    USER_PASSWORD VARCHAR(255) NOT NULL
);

CREATE TABLE IF NOT EXISTS USER_DETAILS (
    USERNAME VARCHAR(255) PRIMARY KEY,
    PHONE CHAR(10) NOT NULL,
    EMAIL VARCHAR(255) NOT NULL,
    FOREIGN KEY (USERNAME) REFERENCES USERS_LOGIN(USERNAME) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS SNAKE_GAME (
    SNAKE_GAME_ID INT AUTO_INCREMENT PRIMARY KEY,
    USERNAME VARCHAR(255),
    SCORE INT NOT NULL,
    FOREIGN KEY (USERNAME) REFERENCES USERS_LOGIN(USERNAME) ON DELETE CASCADE
);
    
CREATE TABLE IF NOT EXISTS GAMBLE_GAME_POINTS (
    USERNAME VARCHAR(255) PRIMARY KEY,
    SCORE INT NOT NULL,
    FOREIGN KEY (USERNAME) REFERENCES USERS_LOGIN(USERNAME) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS GAMBLE_GAME_GAMBLES (
    GAMBLE_GAME_ID INT AUTO_INCREMENT PRIMARY KEY,
    USER1 VARCHAR(255) NOT NULL,
    USER2 VARCHAR(255) NOT NULL,
    SCORE1 INT NOT NULL,
    SCORE2 INT NOT NULL,
    -- SIGNED INT GAMBLE
    GAMBLE INT NOT NULL,
    FOREIGN KEY (USER1) REFERENCES USERS_LOGIN(USERNAME) ON DELETE CASCADE,
    FOREIGN KEY (USER2) REFERENCES USERS_LOGIN(USERNAME) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS SPACE_INVADERS_GAME (
    SPACE_INVADERS_GAME_ID INT AUTO_INCREMENT PRIMARY KEY,
    USERNAME VARCHAR(255),
    SCORE INT NOT NULL,
    FOREIGN KEY (USERNAME) REFERENCES USERS_LOGIN(USERNAME) ON DELETE CASCADE
);

-- DROP DATABASE IF EXISTS GAME_DB;

-- Display all tables
SELECT * FROM USERS_LOGIN;
SELECT * FROM USER_DETAILS;
SELECT * FROM SNAKE_GAME;
SELECT * FROM GAMBLE_GAME_POINTS;
SELECT * FROM GAMBLE_GAME_GAMBLES;
SELECT * FROM SPACE_INVADERS_GAME;

-- Select all scores for gamble game using union
SELECT USER1, USER2, GAMBLE FROM GAMBLE_GAME_GAMBLES WHERE USER1 = '{current_user}'
UNION
SELECT USER2, USER1, -GAMBLE AS GAMBLE FROM GAMBLE_GAME_GAMBLES WHERE USER2 = '{current_user}';

-- Trigger to create a new record in gamble scores when a new user is added
DELIMITER //
CREATE TRIGGER ADD_USER_TO_GAMBLE_SCORES
AFTER INSERT ON USERS_LOGIN
FOR EACH ROW
BEGIN
    INSERT INTO GAMBLE_GAME_POINTS (USERNAME, SCORE) VALUES (NEW.USERNAME, 100);
END;
//
DELIMITER ;

-- Gamble

INSERT INTO GAMBLE_GAME_GAMBLES (USER1, USER2, SCORE1, SCORE2, GAMBLE) VALUES ('{self.player1_name}', '{self.player2_name}', {self.player1_points}, {self.player2_points}, {total})

INSERT INTO GAMBLE_GAME_GAMBLES (USER1, USER2, SCORE1, SCORE2, GAMBLE) VALUES ('{self.player2_name}', '{self.player1_name}', {self.player2_points}, {self.player1_points}, {total})

SELECT SCORE FROM GAMBLE_GAME_POINTS WHERE USERNAME = '{user1}';

INSERT INTO GAMBLE_GAME_POINTS (USERNAME, SCORE) VALUES ('{user1}', 100);

UPDATE GAMBLE_GAME_POINTS SET SCORE = 50 WHERE USERNAME = '{user1}' ;

SELECT SCORE FROM GAMBLE_GAME_POINTS WHERE USERNAME = '{user2}';

INSERT INTO GAMBLE_GAME_POINTS (USERNAME, SCORE) VALUES ('{user2}', 100);

UPDATE GAMBLE_GAME_POINTS SET SCORE = 50 WHERE USERNAME = '{user2}' ;


-- Snake Game

INSERT INTO SNAKE_GAME (USERNAME, SCORE) VALUES ('{user}', {score});

-- Space Invaders Game

INSERT INTO SPACE_INVADERS_GAME (USERNAME, SCORE) VALUES ('{user}', {score});


-- Main Gui

SELECT USER_PASSWORD FROM USERS_LOGIN WHERE USERNAME = '{username}';

UPDATE GAMBLE_GAME_POINTS SET SCORE = {score1} WHERE USERNAME = '{current_user}';

UPDATE GAMBLE_GAME_POINTS SET SCORE = {score2} WHERE USERNAME = '{secondary_user}';

INSERT INTO USERS_LOGIN (USERNAME, USER_PASSWORD) VALUES ('{username}', '{password}');

INSERT INTO USER_DETAILS (USERNAME, PHONE, EMAIL) VALUES ('{username}', '{phone}', '{email}');

SELECT * FROM GAMBLE_GAME_POINTS;

SELECT USER1, USER2, GAMBLE FROM GAMBLE_GAME_GAMBLES WHERE USER1 = '{current_user}'
UNION
SELECT USER2, USER1, -GAMBLE AS GAMBLE FROM GAMBLE_GAME_GAMBLES WHERE USER2 = '{current_user}';

SELECT USERNAME, SCORE FROM SNAKE_GAME ORDER BY SNAKE_GAME_ID DESC;

SELECT USERNAME, SCORE FROM SNAKE_GAME WHERE USERNAME = '{current_user}' ORDER BY SCORE DESC;

SELECT USERNAME, SCORE FROM SNAKE_GAME ORDER BY SCORE DESC;

SELECT USERNAME, MAX(SCORE) as PERSONAL_HIGH FROM SNAKE_GAME GROUP BY USERNAME;

SELECT USERNAME, SCORE FROM SPACE_INVADERS_GAME ORDER BY SPACE_INVADERS_GAME_ID DESC;

SELECT USERNAME, SCORE FROM SPACE_INVADERS_GAME WHERE USERNAME = '{current_user}' ORDER BY SCORE DESC;

SELECT USERNAME, SCORE FROM SPACE_INVADERS_GAME ORDER BY SCORE DESC;

SELECT USERNAME, MAX(SCORE) as PERSONAL_HIGH FROM SPACE_INVADERS_GAME GROUP BY USERNAME;


-- Admin Queries

-- Select all users info
CREATE VIEW USERS_INFO AS
SELECT L.USERNAME, L.USER_PASSWORD, D.PHONE, D.EMAIL
FROM USERS_LOGIN L
JOIN USER_DETAILS D ON L.USERNAME = D.USERNAME;
SELECT * FROM USERS_INFO;

-- Delete user from USERS_LOGIN
DELETE FROM USERS_LOGIN WHERE USERNAME = '{username}';

-- Update user password and user details using procedure
DELIMITER //
CREATE PROCEDURE UpdateUserDetails(
    IN p_username VARCHAR(255), 
    IN p_password VARCHAR(255), 
    IN p_phone VARCHAR(15), 
    IN p_email VARCHAR(255)
    )
BEGIN
    -- Update user password in USERS_LOGIN
    UPDATE USERS_LOGIN 
    SET USER_PASSWORD = p_password 
    WHERE USERNAME = p_username;

    -- Update user details in USER_DETAILS
    UPDATE USER_DETAILS 
    SET PHONE = p_phone, EMAIL = p_email 
    WHERE USERNAME = p_username;

END //
DELIMITER ;
CALL UpdateUserDetails('{username}', '{password}', '{phone}', '{email}');

-- User who never played either snake game or the space invaders game or gamble game
SELECT USERNAME 
FROM USERS_LOGIN 
WHERE USERNAME NOT IN (
        SELECT USERNAME FROM SNAKE_GAME
    ) AND
    USERNAME NOT IN (
        SELECT USERNAME FROM SPACE_INVADERS_GAME
    ) AND
    USERNAME NOT IN (
        SELECT USER1 FROM GAMBLE_GAME_GAMBLES
    ) AND
    USERNAME NOT IN (
        SELECT USER2 FROM GAMBLE_GAME_GAMBLES
    )
;
